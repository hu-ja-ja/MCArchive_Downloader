# This code was generated by GitHub Copilot (qwen2.5-coder:7b & GPT-4o).
# It has not been manually reviewed, tested, or modified.
# Use at your own risk.

import os
import sys
import time
import argparse  # argparseを追加
from utils.api import get_mods_by_version, get_mod_download_url, get_all_mod_download_urls
from utils.downloader import download_mod

def main():
    parser = argparse.ArgumentParser(
        description="MCArchive Downloader",
        epilog="Example usage: python src/main.py --download b1.7_01 ./mods"
    )
    parser.add_argument("--download", action="store_true", help="Download mods for the specified game version and save them to the specified directory.")
    parser.add_argument("--url", action="store_true", help="List all mod URLs for the specified game version.")
    parser.add_argument("game_version", type=str, help="The game version to fetch mods for (e.g., b1.7_01).")
    parser.add_argument("download_directory", type=str, nargs="?", help="The directory to download mods to (required for --download).")

    args = parser.parse_args()

    if args.download and not args.download_directory:
        print("Error: --download requires a download directory to be specified.")
        sys.exit(1)

    game_version = args.game_version

    print(f"Fetching mods for version: {game_version}")
    try:
        mod_slugs = get_mods_by_version(game_version)
    except ValueError as e:
        print(f"\033[91mError: {e}\033[0m")
        sys.exit(1)

    print(f"Mod slugs fetched: {mod_slugs}")

    if args.url:
        print("Listing all mod URLs:")
        for slug in mod_slugs:
            try:
                urls = get_all_mod_download_urls(slug, game_version)
                for url in urls:
                    print(url)
            except ValueError as e:
                print(f"\033[91mError: {e}\033[0m")
        return

    if args.download:
        download_directory = args.download_directory

        if not os.path.exists(download_directory):
            os.makedirs(download_directory)

        mediafire_warnings = []

        for i, slug in enumerate(mod_slugs):
            if i > 0 and i % 20 == 0:
                print("Rate limit reached. Waiting for 1 minute...")
                time.sleep(60)

            print(f"Fetching download URL for mod: {slug}")
            try:
                mod_url = get_mod_download_url(slug, game_version)
            except ValueError as e:
                print(f"\033[91mError: {e}\033[0m")
                continue

            if mod_url:
                if "mediafire.com" in mod_url:
                    mediafire_warnings.append(f"{slug}: {mod_url}")
                else:
                    print(f"Downloading mod from: {mod_url}")
                    download_mod(mod_url, download_directory)
            else:
                print(f"\033[93mWarning: Download URL not found for mod: {slug}\033[0m")

            time.sleep(3)

        if mediafire_warnings:
            print("\n\033[93mMediaFire links detected. These may require manual download:\033[0m")
            for warning in mediafire_warnings:
                print(f"\033[93m{warning}\033[0m")

        print("Download completed.")

if __name__ == "__main__":
    main()